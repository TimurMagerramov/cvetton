import cv2
import numpy as np
from time import sleep


WINDOWNAME = "Nastro Ton"

BLOBSIZE = 1500

S_MIN = 29
S_MAX = 255
V_MIN = 148
V_MAX = 255

RECTCOLOR = (0, 255, 0)

RTHICK = 2

def checkSize(w, h):
    if w * h > BLOBSIZE:
        return True
    else:
        return False
def empty(a):
    pass
frameSize = (320, 240)
cap = cv2.VideoCapture(0)
sleep(2)
cv2.namedWindow(WINDOWNAME)
cv2.resizeWindow(WINDOWNAME, 500, 100)
cv2.createTrackbar("Hue", WINDOWNAME, 0, 180, empty)

while True:
        ret, frame = cap.read()
        cv2.imshow('frame', frame)
        image = vs.read()
        h_min = cv2.getTrackbarPos("Hue", WINDOWNAME) - 10
        h_max = cv2.getTrackbarPos("Hue", WINDOWNAME) + 10
        lower_range = np.array([h_min, S_MIN, V_MIN])
        upper_range = np.array([h_max, S_MAX, V_MAX])
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        thresh = cv2.inRange(hsv, lower_range, upper_range)
        bitwise = cv2.bitwise_and(image, image, mask=thresh)
        cv2.imshow("bitwise", bitwise)
        gray = cv2.cvtColor(bitwise, cv2.COLOR_BGR2GRAY)
        contours, _ = cv2.findContours(gray, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
        if len(contours) != 0:
            cv2.drawContours(image, contours, -1, 255, 1)
            c = max(contours, key = cv2.contourArea)
            x,y,w,h = cv2.boundingRect(c)
            if checkSize(w, h):
                cv2.rectangle(image, (x, y), (x+w, y+h), RECTCOLOR, RTHICK)
        cv2.imshow("Image", image)
        k = cv2.waitKey(1)
        if k == 27:
            break

cv2.destroyAllWindows()
vs.stop()
